# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Gobs
                                 A QGIS plugin
 This plugin provides tools to store and manage spatial and time data in a standardized way
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-15
        copyright            : (C) 2019 by 3liz
        email                : info@3liz.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = '3liz'
__date__ = '2019-02-15'
__copyright__ = '(C) 2019 by 3liz'

import os

from qgis.PyQt import (
    QtGui,
    QtWidgets,
    uic
)
from qgis.PyQt.QtWidgets import (
    QPushButton
)
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import Qgis
from functools import partial
try:
    # QGIS < 3.8
    # noinspection PyPep8Naming,PyUnresolvedReferences
    from processing import execAlgorithmDialog
    # noinspection PyPep8Naming,PyUnresolvedReferences
    from processing import run as execAlgorithm
except ModuleNotFoundError:
    # QGIS >= 3.8
    # noinspection PyPep8Naming,PyUnresolvedReferences
    from qgis.processing import execAlgorithmDialog
    # noinspection PyPep8Naming,PyUnresolvedReferences
    from qgis.processing import run as execAlgorithm

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gobs_dockwidget_base.ui'))


class GobsDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(GobsDockWidget, self).__init__(parent)

        self.iface = iface

        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Declare algs
        self.algorithms = [
            'configure_plugin',
            'create_database_structure',
            'upgrade_database_structure',

            'import_spatial_layer_data',
            'import_observation_data',

            'get_spatial_layer_vector_data',
            'get_series_data',
            'get_series_list',
            'get_aggregated_data'
        ]
        for alg in self.algorithms:
            button = self.findChild(QPushButton, 'button_{0}'.format(alg))
            if not button:
                continue
            button.clicked.connect(partial(self.runAlgorithm, alg))


    def tr(string):
        return QCoreApplication.translate('Processing', string)

    def runAlgorithm(self, name):

        if not name in self.algorithms:
            self.iface.messageBar().pushMessage(
                self.tr("Error"),
                self.tr("This algorithm cannot be found") + ' {}'.format(name),
                level=Qgis.Critical
            )
            return

        # Run alg
        param = {}
        alg_name = 'gobs:{0}'.format(name)
        print(alg_name)
        execAlgorithmDialog(alg_name, param)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
