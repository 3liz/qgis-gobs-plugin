BEGIN;

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- New columns
-- observation
ALTER TABLE gobs.observation RENAME COLUMN ob_timestamp TO ob_start_timestamp;
COMMENT ON COLUMN gobs.observation.ob_start_timestamp IS 'Start timestamp of the observation data';
ALTER TABLE gobs.observation ADD COLUMN IF NOT EXISTS ob_end_timestamp timestamp;
ALTER TABLE gobs.observation ADD COLUMN IF NOT EXISTS ob_uid uuid DEFAULT public.uuid_generate_v4();
ALTER TABLE gobs.observation ADD COLUMN IF NOT EXISTS created_at timestamp DEFAULT now();
ALTER TABLE gobs.observation ADD COLUMN IF NOT EXISTS updated_at timestamp DEFAULT now();
ALTER TABLE gobs.observation ALTER COLUMN ob_uid SET NOT NULL;
ALTER TABLE gobs.observation ALTER COLUMN created_at SET NOT NULL;
ALTER TABLE gobs.observation ALTER COLUMN updated_at SET NOT NULL;

COMMENT ON COLUMN gobs.observation.ob_end_timestamp IS 'End timestamp of the observation data (optional)';
COMMENT ON COLUMN gobs.observation.ob_uid IS 'Observation uid: autogenerated unique identifier';
COMMENT ON COLUMN gobs.observation.created_at IS 'Creation timestamp';
COMMENT ON COLUMN gobs.observation.updated_at IS 'Last updated timestamp';

-- indicator
ALTER TABLE gobs.indicator ADD COLUMN IF NOT EXISTS id_category text;
ALTER TABLE gobs.indicator ADD COLUMN IF NOT EXISTS created_at timestamp DEFAULT now();
ALTER TABLE gobs.indicator ADD COLUMN IF NOT EXISTS updated_at timestamp DEFAULT now();
ALTER TABLE gobs.indicator ALTER COLUMN created_at SET NOT NULL;
ALTER TABLE gobs.indicator ALTER COLUMN updated_at SET NOT NULL;
COMMENT ON COLUMN gobs.indicator.id_category IS 'Category of the indicator. Used to group several indicators by themes.';
COMMENT ON COLUMN gobs.indicator.created_at IS 'Creation timestamp';
COMMENT ON COLUMN gobs.indicator.updated_at IS 'Last updated timestamp';

-- spatial_object
ALTER TABLE gobs.spatial_object ADD COLUMN IF NOT EXISTS so_valid_from date DEFAULT now()::date;
ALTER TABLE gobs.spatial_object ADD COLUMN IF NOT EXISTS so_valid_to date ;
ALTER TABLE gobs.spatial_object ADD COLUMN IF NOT EXISTS so_uid uuid DEFAULT public.uuid_generate_v4();
ALTER TABLE gobs.spatial_object ADD COLUMN IF NOT EXISTS created_at timestamp DEFAULT now();
ALTER TABLE gobs.spatial_object ADD COLUMN IF NOT EXISTS updated_at timestamp DEFAULT now();
ALTER TABLE gobs.spatial_object ALTER COLUMN so_valid_from SET NOT NULL;
ALTER TABLE gobs.spatial_object ALTER COLUMN so_uid SET NOT NULL;
ALTER TABLE gobs.spatial_object ALTER COLUMN created_at SET NOT NULL;
ALTER TABLE gobs.spatial_object ALTER COLUMN updated_at SET NOT NULL;
COMMENT ON COLUMN gobs.spatial_object.so_valid_from IS 'Date from which the spatial object is valid.';
COMMENT ON COLUMN gobs.spatial_object.so_valid_to IS 'Date from which the spatial object is not valid. Optional: if not given, the spatial object is always valid';
COMMENT ON COLUMN gobs.spatial_object.so_uid IS 'Spatial object uid: autogenerated unique identifier';
COMMENT ON COLUMN gobs.spatial_object.created_at IS 'Creation timestamp';
COMMENT ON COLUMN gobs.spatial_object.updated_at IS 'Last updated timestamp';

-- Remove old constraint unique (so_unique_id, fk_id_spatial_layer)
ALTER TABLE ONLY gobs.spatial_object
DROP CONSTRAINT IF EXISTS spatial_object_so_unique_id_fk_id_spatial_layer_key
;

-- Replace by new constraint
ALTER TABLE ONLY gobs.spatial_object
DROP CONSTRAINT IF EXISTS spatial_object_unique_key;
ALTER TABLE ONLY gobs.spatial_object
ADD CONSTRAINT spatial_object_unique_key
UNIQUE (so_unique_id, fk_id_spatial_layer, so_valid_from);


DROP TABLE IF EXISTS gobs.document CASCADE;
CREATE TABLE IF NOT EXISTS gobs.document (
    id serial primary key,
    do_uid uuid not null default public.uuid_generate_v4(),
    do_label text not null unique,
    do_description text,
    do_type text not null,
    do_path text not null,
    fk_id_indicator integer references gobs.indicator (id),
    created_at timestamp NOT NULL DEFAULT now(),
    updated_at timestamp NOT NULL DEFAULT now()
);
COMMENT ON TABLE gobs.document IS 'List of documents for describing indicators.';
COMMENT ON COLUMN gobs.document.id IS 'ID';
COMMENT ON COLUMN gobs.document.do_uid IS 'Document uid: autogenerated unique identifier';
COMMENT ON COLUMN gobs.document.do_label IS 'Label of the document, used for display. Must be unique';
COMMENT ON COLUMN gobs.document.do_description IS 'Description of the document';
COMMENT ON COLUMN gobs.document.do_type IS 'Type of the document';
COMMENT ON COLUMN gobs.document.do_path IS 'Relative path of the document to the project storage. Ex: media/indicator/documents/indicator_weather_status_description.pdf';
COMMENT ON COLUMN gobs.document.fk_id_indicator IS 'Indicator id';
COMMENT ON COLUMN gobs.document.created_at IS 'Creation timestamp';
COMMENT ON COLUMN gobs.document.updated_at IS 'Last updated timestamp';

INSERT INTO gobs.glossary
(gl_field, gl_code, gl_label, gl_description, gl_order)
VALUES
('do_type', 'preview', 'Preview', 'Preview is an image defining the indicator', 1),
('do_type', 'image', 'Image', 'Image', 2),
('do_type', 'video', 'Video', 'Video', 3),
('do_type', 'document', 'Document', 'Generic document like PDF, ODT, text files or archives', 4),
('do_type', 'url', 'URL', 'URL pointing to the document', 5),
('do_type', 'other', 'Other', 'Other type of document', 6)
ON CONFLICT DO NOTHING
;

DROP TABLE IF EXISTS gobs.deleted_data_log CASCADE;
CREATE TABLE gobs.deleted_data_log (
    de_table text NOT NULL,
    de_uid uuid NOT NULL,
    de_timestamp timestamp NOT NULL DEFAULT now()
);
ALTER TABLE gobs.deleted_data_log ADD PRIMARY KEY (de_table, de_uid);
COMMENT ON TABLE gobs.deleted_data_log IS 'Log of deleted objects from observation table. Use for synchronization purpose'
;
COMMENT ON COLUMN gobs.deleted_data_log.de_table IS 'Source table of the deleted object: observation';
COMMENT ON COLUMN gobs.deleted_data_log.de_uid IS 'Unique text identifier of the object. Observation: ob_uid';
COMMENT ON COLUMN gobs.deleted_data_log.de_timestamp IS 'Timestamp of the deletion';

-- Triggers

-- observation deletions
CREATE OR REPLACE FUNCTION gobs.log_deleted_object()
RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    oid text;
BEGIN
    INSERT INTO gobs.deleted_data_log (
        de_table,
        de_uid,
        de_timestamp
    )
    VALUES (
        TG_TABLE_NAME::text,
        OLD.ob_uid,
        now()
    )
    ;
    RETURN OLD;
END;
$$;

DROP TRIGGER IF EXISTS trg_log_deleted_object ON gobs.observation;
CREATE TRIGGER trg_log_deleted_object
AFTER DELETE ON gobs.observation
FOR EACH ROW EXECUTE PROCEDURE gobs.log_deleted_object();

-- Timestamp columns
CREATE OR REPLACE FUNCTION gobs.manage_object_timestamps()
RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    nowtm timestamp;
BEGIN
    nowtm = now();
    IF TG_OP = 'INSERT' THEN
        NEW.created_at = nowtm;
        NEW.updated_at = nowtm;
    END IF;

    IF TG_OP = 'UPDATE' THEN
        NEW.updated_at = nowtm;
    END IF;

    RETURN NEW;
END;
$$;


DROP TRIGGER IF EXISTS trg_manage_object_timestamps ON gobs.observation;
CREATE TRIGGER trg_manage_object_timestamps
BEFORE INSERT OR UPDATE ON gobs.observation
FOR EACH ROW EXECUTE PROCEDURE gobs.manage_object_timestamps();

DROP TRIGGER IF EXISTS trg_manage_object_timestamps ON gobs.document;
CREATE TRIGGER trg_manage_object_timestamps
BEFORE INSERT OR UPDATE ON gobs.document
FOR EACH ROW EXECUTE PROCEDURE gobs.manage_object_timestamps();

DROP TRIGGER IF EXISTS trg_manage_object_timestamps ON gobs.indicator;
CREATE TRIGGER trg_manage_object_timestamps
BEFORE INSERT OR UPDATE ON gobs.indicator
FOR EACH ROW EXECUTE PROCEDURE gobs.manage_object_timestamps();


-- Update observation when corresponding spatial object geometry is modified
-- Timestamp columns
CREATE OR REPLACE FUNCTION gobs.update_observation_on_spatial_object_change()
RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'UPDATE' AND NOT ST_Equals(NEW.geom, OLD.geom) THEN
        UPDATE gobs.observation
        SET updated_at = now()
        WHERE fk_id_spatial_object = NEW.id
        ;
    END IF;

    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS trg_update_observation_on_spatial_object_change ON gobs.observation;
CREATE TRIGGER trg_update_observation_on_spatial_object_change
AFTER UPDATE ON gobs.spatial_object
FOR EACH ROW EXECUTE PROCEDURE gobs.update_observation_on_spatial_object_change();

-- Update spatial_object end of validity date when new data is inserted
CREATE OR REPLACE FUNCTION gobs.update_spatial_object_end_validity()
RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    nowtm timestamp;
    last_id integer;
BEGIN
    last_id = 0;
    IF TG_OP = 'INSERT' THEN

        -- Get the last corresponding item
        SELECT INTO last_id
        so.id
        FROM gobs.spatial_object so
        WHERE TRUE
        -- do not modify if there is already a value
        AND so.so_valid_to IS NULL
        -- only for same spatial layer
        AND so.fk_id_spatial_layer = NEW.fk_id_spatial_layer
        -- and same unique id ex: code insee
        AND so.so_unique_id = NEW.so_unique_id
        -- and not for the same object
        AND so.so_uid != NEW.so_uid
        -- only if the new object has a start validity date AFTER the existing one
        AND so.so_valid_from < NEW.so_valid_from
        -- only the preceding one
        ORDER BY so_valid_from DESC
        LIMIT 1
        ;

        -- Update it
        IF last_id > 0 THEN
            UPDATE gobs.spatial_object so
            SET so_valid_to = NEW.so_valid_from
            WHERE so.id = last_id
            ;
        END IF;

    END IF;

    RETURN NEW;
END;
$$;


DROP TRIGGER IF EXISTS trg_update_spatial_object_end_validity ON gobs.spatial_object;
CREATE TRIGGER trg_update_spatial_object_end_validity
AFTER INSERT ON gobs.spatial_object
FOR EACH ROW EXECUTE PROCEDURE gobs.update_spatial_object_end_validity();


-- DATA
-- Update observation timestamps
UPDATE gobs.observation o
SET
created_at = im_timestamp,
updated_at = im_timestamp
FROM gobs.import i
WHERE o.fk_id_import = i.id
;
-- Update spatial_object timestamps
UPDATE gobs.spatial_object so
SET
so_valid_from = ob_start_timestamp - '1 day'::interval,
created_at = ob_start_timestamp - '1 day'::interval,
updated_at = ob_start_timestamp - '1 day'::interval
FROM gobs.observation o
WHERE o.fk_id_spatial_object = so.id
;


COMMIT;
